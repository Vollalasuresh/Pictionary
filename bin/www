#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pictionary:server');
var http = require('http');
var winston = require('winston');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var serverforsocket=server.listen(port);


var io = require('socket.io').listen(server);
var pict=require('../pictionary')
// require('../socket')(io);
// 
var clients=[];
    
    
io.on('connection', function (socket) 
    {

      socket.on( 'connectman', function(session) 
      {
        winston.log('info',"Client connected");
      });

     socket.on( 'checkforroomtocreate', function(session ,data) 
      {
        var roomname=data.room;
        var username=data.user;
        winston.log('info',"Client connected");
        //check whether room exists 
        //if not
        var clients = io.sockets.adapter.rooms[roomname];   
        if (clients)
        {
          var error="Room already exsits . Please create a new room.";
          socket.emit('displayerror',error);
        }
        else
        {
          socket.emit('changeurl',roomname);
        }
        
      });

       socket.on( 'checkforroomtojoin', function(session ,data) 
      {
        var roomname=data.room;
        var username=data.user;
        winston.log('info',"Client connected");
        var clients = io.sockets.adapter.rooms[roomname];   
        console.log(clients);
        if (clients)
        {
           socket.emit('changeurl',roomname);
        }
        else
        {
          
          var error="No room exists. Please create a room first";
          socket.emit('displayerror',error);
        }
        
      });

      socket.on( 'joinroom', function(session,data) 
      {
          socket.room=data.room;
          socket.user=data.user;
          clients.push(data.user);
          socket.join(data.room);
      });


      socket.on( 'drawLine', function(data, session ) 
      {
            //  socket.broadcast.to(room).emit('new fan');
          if(socket.room)
          {
            var room=socket.room;
            winston.log('info','Room Name is '+room)
            socket.broadcast.to(room).emit('drawLine',data);
          }
          else
          {
            var error="Unauthorized access.";
            socket.emit('displayerror',error);
          }
      });


    });

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
